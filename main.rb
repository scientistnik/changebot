#!/usr/bin/env ruby
Encoding.default_external = 'UTF-8'

require 'telegram/bot'

require_relative 'user'
require_relative 'announce'
require_relative 'assets'
require_relative 'private_keys'

DEBUG = (ARGV[0] == '--debug')
token = (DEBUG) ? (TELEGRAM_TOKEN_DEBUG) : (TELEGRAM_TOKEN)

kbutton = Telegram::Bot::Types::InlineKeyboardButton
markup = Telegram::Bot::Types::ReplyKeyboardMarkup


cycle = true
while cycle do
cycle = false if DEBUG
puts "New cycle..."
begin
Telegram::Bot::Client.run(token) do |bot|
  bot.listen do |message|
begin
		if User.in_blacklist? message.from
			bot.api.send_message(chat_id: message.chat.id, text: "–í—ã –≤ —á–µ—Ä–Ω–æ–º —Å–ø–∏—Å–∫–µ. –ï—Å–ª–∏ –í—ã –ø–æ–ø–∞–ª–∏ —Ç—É–¥–∞ —Å–ª—É—á–∞–π–Ω–æ –æ–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫ –∞–¥–º–∏–Ω—É @scientistnik")
			next
		end

		user = User.new message.from

		case message
		when Telegram::Bot::Types::Message
			case message.text
			when '/start'
				question = "–ß—Ç–æ –í–∞—Å –∏–Ω—Ç–µ—Ä–µ—Å—É–µ—Ç?"
				answers =
					Telegram::Bot::Types::ReplyKeyboardMarkup
					.new(keyboard: [['üá∑üá∫ bitRUB', 'üá∫üá∏ bitUSD'],['üá≤üáµ bitEUR','üèµ bitBTC'],['‚úâÔ∏è –ú–æ–∏ –æ–±—ä—è–≤–ª–µ–Ω–∏—è','üíµ –ö–æ—à–µ–ª–µ–∫']])
				bot.api.send_message(chat_id: user.tid, text: question, reply_markup: answers)
			when '/stop'
				if user.name == 'scientistnik'
					bot.api.send_message(chat_id: user.tid, text: '–£—Ö–æ–∂—É –≤ —Å–æ–Ω. –í—Å–µ–º –ø–æ–∫–∞!')
					cycle = false
				else
					kb = Telegram::Bot::Types::ReplyKeyboardRemove.new(remove_keyboard: true)
					bot.api.send_message(chat_id: message.chat.id, text: 'Sorry to see you go :(', reply_markup: kb)
				end
			when '‚úâÔ∏è –ú–æ–∏ –æ–±—ä—è–≤–ª–µ–Ω–∏—è'
				kb = []
				user.announces.each do |ann|
					kb << kbutton.new(text: "–í—ã –æ—Ç–¥–∞–µ—Ç–µ #{ann.give}, –ø–æ–ª—É—á–∞–µ—Ç–µ #{ann.get}", callback_data: "ann-edit_#{ann.id}")
				end
				if kb.empty?
					#kb << kbutton.new(text: '–°–æ–∑–¥–∞—Ç—å —Å–≤–æ–µ –æ–±—ä—è–≤–ª–µ–Ω–∏–µ', callback_data: "new#{k}")
					#markup = Telegram::Bot::Types::InlineKeyboardMarkup.new(inline_keyboard: kb)
					#bot.api.send_message(chat_id: message.chat.id, text: '–£ –í–∞—Å –Ω–µ—Ç –æ–±—ä—è–≤–ª–µ–Ω–∏–π', reply_markup: markup)
					bot.api.send_message(chat_id: message.chat.id, text: '–£ –í–∞—Å –Ω–µ—Ç –æ–±—ä—è–≤–ª–µ–Ω–∏–π')
				else
					markup = Telegram::Bot::Types::InlineKeyboardMarkup.new(inline_keyboard: kb)
					bot.api.send_message(chat_id: message.chat.id, text: '–í–æ—Ç –í–∞—à–∏ –æ–±—ä—è–≤–ª–µ–Ω–∏—è:', reply_markup: markup)
				end
			when /^.?.? bit/
				asset = Asset.get message.text[/bit.*/]
				kb = []
				arr_col = [ kbutton.new(text: asset.name, callback_data: "sell_#{asset.name}")]
				Asset.all_without(asset).each do |as|
					next if as.name[/^bit/]
					size = Announce.count_pair asset.id, as.id
					arr_col << kbutton.new(text: "#{as.name} (#{size})", callback_data: "pair_#{as.name}_#{asset.name}")
					if arr_col.size == 2
						kb << arr_col
						arr_col = []
					end
				end
				kb << arr_col if arr_col.size > 0
				markup = Telegram::Bot::Types::InlineKeyboardMarkup.new(inline_keyboard: kb)
				bot.api.send_message(chat_id: message.chat.id, text: "‚ÄºÔ∏è–ß—Ç–æ –≤—ã —Ö–æ—Ç–∏—Ç–µ –æ—Ç–¥–∞—Ç—å?‚ÄºÔ∏è\n\n–ï—Å–ª–∏ –≤ –¥–∞–Ω–Ω–æ–º —Å–ø–∏—Å–∫–µ –Ω–µ —Ö–≤–∞—Ç–∞–µ—Ç –Ω—É–∂–Ω–æ–≥–æ –ø—É–Ω–∫—Ç–∞, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞ –Ω–∞–ø–∏—à–∏—Ç–µ –º–Ω–µ. –ü—Ä—è–º —Ç—É—Ç –Ω–∞–ø–∏—à–∏—Ç–µ!", reply_markup: markup)
			when /^.?.? –ö–æ—à–µ–ª–µ–∫/
				bot.api.send_message(chat_id: message.chat.id, text: "–î–∞–Ω–Ω–∞—è –æ–ø—Ü–∏—è –ø—Ä–æ—Ö–æ–¥–∏—Ç —Å—Ç–∞–¥–∏—é —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è....–ï—Å–ª–∏ —Ö–æ—Ç–∏—Ç–µ –ø—Ä–∏–Ω—è—Ç—å —É—á–∞—Å—Ç–∏–µ –≤ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏ –ø—Ä–æ—Å—Ç–æ –Ω–∞–ø–∏—à–∏—Ç–µ–º–Ω–µ...–ø—Ä—è–º —Ç—É—Ç...")
			else
				if !user.status.nil? && user.status[/^new_/]
					give, get = user.status.split('_')[1..-1].map {|e| Asset.get e}
					Announce.create user.id, give.id, get.id, message.text
					user.status = nil
					bot.api.send_message(chat_id: message.chat.id, text: '–°–æ–æ–±—â–µ–Ω–∏–µ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–æ. –°–ø–∞—Å–∏–±–æ!')
				elsif user.name == 'scientistnik'
					if user.status.nil? || user.status.empty?
						kb = []
						kb << kbutton.new(text: '–ü–æ–∫–∞–∑–∞—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π', callback_data: "admin_show_users")
						markup = Telegram::Bot::Types::InlineKeyboardMarkup.new(inline_keyboard: kb)
						bot.api.send_message(chat_id: message.chat.id, text: '–î–æ–±—Ä–æ–≥–æ –≤—Ä–µ–º–µ–Ω–∏ —Å—É—Ç–æ–∫, —Ö–æ–∑—è–∏–Ω! –ö–æ–º—É-—Ç–æ —Ö–æ—Ç–∏—Ç–µ –Ω–∞–ø–∏—Å–∞—Ç—å?', reply_markup: markup)
					elsif user.status[/^send_/]
						uname = User.new username: user.status[5..-1]
						bot.api.send_message(chat_id: uname.tid, text: message.text)
						user.status = nil
					end
				else
					question = "–ß—Ç–æ –í–∞—Å –∏–Ω—Ç–µ—Ä–µ—Å—É–µ—Ç?"
					answers =
						Telegram::Bot::Types::ReplyKeyboardMarkup
						.new(keyboard: [['üá∑üá∫ bitRUB', 'üá∫üá∏ bitUSD'],['üá≤üáµ bitEUR','üèµ bitBTC'],['‚úâÔ∏è –ú–æ–∏ –æ–±—ä—è–≤–ª–µ–Ω–∏—è']])
					bot.api.send_message(chat_id: user.tid, text: question, reply_markup: answers)
					bot.api.send_message(chat_id: User.new(username: 'scientistnik').tid, text: "–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å #{user} –Ω–∞–ø–∏—Å–∞–ª –±–æ—Ç—É: #{message.text}")
				end
			end

		when Telegram::Bot::Types::CallbackQuery
			call = message.data
			case call
			when 'admin_show_users'
				kb = []
				arr_col = []
				User.all.each do |u|
					arr_col << kbutton.new(text: "@#{u.name}", callback_data: "admin_send_#{u.name}")
					if arr_col.size == 4
						kb << arr_col
						arr_col = []
					end
				end
				kb << arr_col if arr_col.size > 0
				markup = Telegram::Bot::Types::InlineKeyboardMarkup.new(inline_keyboard: kb)
				bot.api.send_message(chat_id: message.from.id, text: "–ö–æ–º—É –Ω–∞–ø–∏—Å–∞—Ç—å?", reply_markup: markup)
			when 'admin_cancel_send'
				user.status = nil
			when /^admin_send_/
				uname = User.new username: call[11..-1]
				user.status = "send_#{uname.name}"
				kb = []
				kb << kbutton.new(text: "–û—Ç–º–µ–Ω–∏—Ç—å", callback_data: 'admin_cancel_send')
				markup = Telegram::Bot::Types::InlineKeyboardMarkup.new(inline_keyboard: kb)
				bot.api.send_message(chat_id: message.from.id, text: "–ß—Ç–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é #{uname.name} –Ω–∞–ø–∏—Å–∞—Ç—å?", reply_markup: markup)
			when /^sell_/
				asset = Asset.get call.split("_")[-1]
				kb = []
				arr_col = []
				Asset.all_without(asset).each do |get|
					next if get.name[/^bit/]
					size = Announce.count_pair get.id, asset.id
					arr_col << kbutton.new(text: "#{get.name} (#{size})", callback_data: "pair_#{asset.name}_#{get.name}")
					if arr_col.size == 2
						kb << arr_col
						arr_col = []
					end
				end
				kb << arr_col if arr_col.size < 2
				markup = Telegram::Bot::Types::InlineKeyboardMarkup.new(inline_keyboard: kb)
				bot.api.send_message(chat_id: message.from.id, text: "–í—ã –æ—Ç–¥–∞–µ—Ç–µ #{asset.name}. ‚ÄºÔ∏è–ß—Ç–æ –í—ã —Ö–æ—Ç–∏—Ç–µ –ø–æ–ª—É—á–∏—Ç—å?‚ÄºÔ∏è\n\n–ï—Å–ª–∏ –≤ –¥–∞–Ω–Ω–æ–º —Å–ø–∏—Å–∫–µ –Ω–µ —Ö–≤–∞—Ç–∞–µ—Ç –ø—É–Ω–∫—Ç–∞, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞ –æ–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É –±–æ—Ç–∞ @scientistnik", reply_markup: markup)
			when /^ann-new_/
				give, get = call.split('_')[1..-1].map {|e| Asset.get e}
				user.status = "new_#{give.name}_#{get.name}"
				bot.api.send_message(chat_id: message.from.id, text: "–ù–∞–ø–∏—à–∏—Ç–µ –æ–±—ä—è–≤–ª–µ–Ω–∏–µ:\n\n–ü–æ–∂–∞–ª—É–π—Å—Ç–∞ —É–∫–∞–∂–∏—Ç–µ –≤ –æ–±—ä—è–≤–ª–µ–Ω–∏–∏ —Å–ª–µ–¥—É—é—â–∏–µ –ø—É–Ω–∫—Ç—ã:\n1. –ö—É—Ä—Å –æ–±–º–µ–Ω–∞. –ò–∑ –æ–±—ä—è–≤–ª–µ–Ω–∏—è –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å –ø–æ–Ω—è—Ç–Ω–æ, —Å–∫–æ–ª—å–∫–æ –í—ã –≥–æ—Ç–æ–≤—ã –æ—Ç–¥–∞—Ç—å, –∞ —Å–∫–æ–ª—å–∫–æ –ø–æ–ª—É—á–∏—Ç—å.\n2. –ö–æ–ª–∏—á–µ—Å—Ç–≤–µ–Ω–Ω–æ–µ –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–µ. –ï—Å–ª–∏ –í—ã –≥–æ—Ç–æ–≤—ã –∫ –æ–±–º–µ–Ω—É –∏–º–µ—è –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏—è –Ω–∞ –º–∏–Ω–∏–º–∞–ª—å–Ω—ã–π –∏/–∏–ª–∏ –º–∞–∫—Å–∏–º–∞–ª—å–Ω—ã–π –æ–±—ä–µ–º, —É–∫–∞–∂–∏—Ç–µ —ç—Ç–æ!\n3. –£–∫–∞–∂–∏—Ç–µ –≤—Ä–µ–º—è –≤ —Ç–µ—á–µ–Ω–∏–∏ –∫–æ—Ç–æ—Ä–æ–≥–æ –í—ã –æ–ø–µ—Ä–∞—Ç–∏–≤–Ω–æ —Å–º–æ–∂–∏—Ç–µ –æ—Å—É—â–µ—Å—Ç–≤–∏—Ç—å –æ–±–º–µ–Ω. –ù–µ –∑–∞–±—É–¥—å—Ç–µ —É–∫–∞–∑–∞—Ç—å —á–∞—Å–æ–≤–æ–π –ø–æ—è—Å!")
			when /^ann-show_/
				ann = Announce.get_id call.split('_')[-1]
				if !ann.id.nil?
					kb = []
					kb << kbutton.new(text: '–ù–∞—á–∞—Ç—å –æ–±–º–µ–Ω', callback_data: "change_#{ann.give}_#{ann.get}_#{ann.user}")
					markup = Telegram::Bot::Types::InlineKeyboardMarkup.new(inline_keyboard: kb)
					bot.api.send_message(chat_id: message.from.id, text: "–û–±—ä—è–≤–ª–µ–Ω–∏–µ @#{ann.user}, –æ–Ω –æ—Ç–¥–∞–µ—Ç #{ann.give}, –ø–æ–ª—É—á–∞–µ—Ç #{ann.get}:\n\n#{ann.message}", reply_markup: markup)
				else
					bot.api.send_message(chat_id: message.from.id, text: "–û–±—ä—è–≤–ª–µ–Ω–∏–µ @#{name} –ø–æ –æ–±–º–µ–Ω—É #{para} –Ω–µ –Ω–∞–π–¥–µ–Ω–æ!")
				end
			when /^ann-edit_/
				ann = Announce.get_id call.split("_")[-1]
				kb = [[kbutton.new(text: '–†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å', callback_data: "ann-new_#{ann.give}_#{ann.get}"),kbutton.new(text: '–£–¥–∞–ª–∏—Ç—å', callback_data: "ann-del_#{ann.id}")]]
				markup = Telegram::Bot::Types::InlineKeyboardMarkup.new(inline_keyboard: kb)
				bot.api.send_message(chat_id: message.from.id, text: ann.message, reply_markup: markup)
			when /^ann-del_/
				Announce.del call.split('_')[-1]
				bot.api.send_message(chat_id: message.from.id, text: '–û–±—ä—è–≤–ª–µ–Ω–∏–µ —É–¥–∞–ª–µ–Ω–æ')
			when /^change_/
				give_nm, get_nm, user_nm = call.split('_')[1..-1]
				give = Asset.get give_nm
				get = Asset.get get_nm
				chuser = User.new username: user_nm
				bot.api.send_message(chat_id: chuser.tid, text: "–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å @#{user.name} —Ö–æ—á–µ—Ç –ø—Ä–æ–∏–∑–≤–µ—Å—Ç–∏ –æ–±–º–µ–Ω #{get} –Ω–∞ #{give}! –°–≤—è–∂–∏—Ç–µ—Å—å —Å –Ω–∏–º –¥–ª—è –æ–±–º–µ–Ω–∞!")

				kb = []
				#kb << kbutton.new(text: "–û—Ü–µ–Ω–∏—Ç–µ #{chuser.name}", callback_data: "karma@#{chuser.name}")
				#markup = Telegram::Bot::Types::InlineKeyboardMarkup.new(inline_keyboard: kb)
				bot.api.send_message(chat_id: message.from.id, text: "–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å @#{chuser.name} –∏–∑–≤–µ—â–µ–Ω! –°–≤—è–∂–∏—Ç–µ—Å—å —Å –Ω–∏–º –¥–ª—è –æ–±–º–µ–Ω–∞!") #, reply_markup: markup)
			when /^pair_/
				give, get = call.split('_')[1..-1].map {|e| Asset.get e}
				arr = Announce.get_all giveas: get.id, getas: give.id
				kb = []
				arr_col = []
				arr.each do |ann|
					arr_col << kbutton.new(text: "@#{ann.user}", callback_data: "ann-show_#{ann.id}")
					if arr_col.size == 2
						kb << arr_col
						arr_col = []
					end
				end
				kb << arr_col if arr_col.size > 0
				kb << kbutton.new(text: 'üìä –ë–µ–∑–æ–ø–∞—Å–Ω—ã–π –æ–±–º–µ–Ω', callback_data: "bot-new_#{give}_#{get}")
				kb << kbutton.new(text: '–°–æ–∑–¥–∞—Ç—å —Å–≤–æ–µ –æ–±—ä—è–≤–ª–µ–Ω–∏–µ', callback_data: "ann-new_#{give}_#{get}")
				if arr.empty?
					markup = Telegram::Bot::Types::InlineKeyboardMarkup.new(inline_keyboard: kb)
					bot.api.send_message(chat_id: message.from.id, text: "–ù–µ—Ç –ø–æ–¥—Ö–æ–¥—è—â–∏—Ö –≤–∞—Ä–∏–∞–Ω—Ç–æ–≤. \n\n–í—ã –º–æ–∂–µ—Ç–µ –æ—Å—É—â–µ—Å—Ç–≤–∏—Ç—å —Å–¥–µ–ª–∫—É —á–µ—Ä–µ–∑ –±–æ—Ç–∞ –∏–ª–∏ –¥–æ–±–∞–≤–∏—Ç—å —Å–æ–±—Å—Ç–≤–µ–Ω–Ω–æ–µ –æ–±—ä—è–≤–ª–µ–Ω–∏–µ.", reply_markup: markup)
				else
					markup = Telegram::Bot::Types::InlineKeyboardMarkup.new(inline_keyboard: kb)
					bot.api.send_message(chat_id: message.from.id, text: '–î–æ—Å—Ç—É–ø–Ω—ã–µ', reply_markup: markup)
				end
			when /^bot-new_/
				give, get = call.split('_')[1..-1].map {|e| Asset.get e}
				bot.api.send_message(chat_id: User.new(username: 'scientistnik').tid, text: "–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å @#{user} —Ö–æ—á–µ—Ç –ø–æ–º–µ–Ω—è—Ç—å #{give} –Ω–∞ #{get}")
				bot.api.send_message(chat_id: user.tid, text: "üìä –ë–µ–∑–æ–ø–∞—Å–Ω—ã–π –æ–±–º–µ–Ω\n\n‚ÄºÔ∏è–≠—Ç–æ –æ–±–º–µ–Ω –º–µ–∂–¥—É —á–∞—Å–Ω—ã–º–∏ –ª–∏—Ü–∞–º–∏ —Å —á–∞—Å—Ç–∏—á–Ω—ã–º –∏–ª–∏ –ø–æ–ª–Ω—ã–º —É—á–∞—Å—Ç–∏–µ–º –±–æ—Ç–∞.‚ÄºÔ∏è\n\n –û–±–º–µ–Ω –ø—Ä–æ–∏—Å—Ö–æ–¥–∏—Ç –≤ —Ç—Ä–∏ —ç—Ç–∞–ø–∞:\n\n1. –í–ª–∞–¥–µ–ª–µ—Ü bitAsset –ø–µ—Ä–µ—Å—ã–ª–∞–µ—Ç –Ω–∞ –∞–∫–∫–∞—É–Ω—Ç –±–æ—Ç–∞ –∂–µ–ª–∞–µ–º—ã–π –æ–±—ä–µ–º bitAsset –¥–ª—è –æ–±–º–µ–Ω–∞ –∏ —É–∫–∞–∑—ã–≤–∞–µ—Ç –Ω–æ–º–µ—Ä –∫–∞—Ä—Ç–æ—á–∫–∏. \n2. –ü–æ–∫—É–ø–∞—Ç–µ–ª—å bitAsset –ø–µ—Ä–µ–≤–æ–¥–∏—Ç —Å—Ä–µ–¥—Å—Ç–≤–∞ –Ω–∞ –∫–∞—Ä—Ç–æ—á–∫—É.\n3. –ü–æ—Å–ª–µ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è –ø–µ—Ä–µ–≤–æ–¥–∞ —Å—Ä–µ–¥—Å—Ç–≤, –±–æ—Ç –ø–µ—Ä–µ–≤–æ–¥–∏—Ç bitAsset –≤ –∑–∞–¥–∞–Ω–Ω—ã–π –∞–∫–∫–∞—É–Ω—Ç.\n\n–ö–æ–º–∏—Å—Å–∏—é –±–æ—Ç –±–µ—Ä–µ—Ç —É –∂–µ–ª–∞—é—â–µ–≥–æ –ø—Ä–∏–æ–±—Ä–µ—Å—Ç–∏ bitAsset. \n\n–ù–∞ –¥–∞–Ω–Ω—ã–π –º–æ–º–µ–Ω—Ç, –∫–æ–º–∏—Å—Å–∏—è —Å–æ—Å—Ç–∞–≤–ª—è–µ—Ç 10 —Ä—É–±–ª–µ–π.")
			else
				p "–ù–µ–≤–µ—Ä–Ω—ã–π –∑–∞–ø—Ä–æ—Å)))"
			end
		end
	rescue Exception => e 
		puts e.message
		puts e.backtrace.inspect
		admin = User.new username: 'scientistnik'
		bot.api.send_message(chat_id: admin.tid, text: e)
		bot.api.send_message(chat_id: admin.tid, text: e.backtrace.inspect)
	end
  end
end
rescue Exception => e
	puts e
end
end
