require_relative 'user'
require_relative 'announce'
require_relative 'assets'

class Bot

	IKM = Telegram::Bot::Types::InlineKeyboardMarkup
	IKB = Telegram::Bot::Types::InlineKeyboardButton
	RKM = Telegram::Bot::Types::ReplyKeyboardMarkup
	RKR = Telegram::Bot::Types::ReplyKeyboardRemove

	attr_accessor :conf, :user, :api

	def initialize _conf
		@conf = _conf
	end

	def first_RKM
		RKM.new(keyboard: [['üá∑üá∫ bitRUB', 'üá∫üá∏ bitUSD'],['üá≤üáµ bitEUR','üèµ bitBTC'],['‚úâÔ∏è –ú–æ–∏ –æ–±—ä—è–≤–ª–µ–Ω–∏—è','üíµ –ö–æ—à–µ–ª–µ–∫']])
	end

	def receive _api, msg
		if User.in_blacklist? msg.from
			_api.send_message(chat_id: msg.chat.id, text: "–í—ã –≤ —á–µ—Ä–Ω–æ–º —Å–ø–∏—Å–∫–µ. –ï—Å–ª–∏ –í—ã –ø–æ–ø–∞–ª–∏ —Ç—É–¥–∞ —Å–ª—É—á–∞–π–Ω–æ –æ–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫ –∞–¥–º–∏–Ω—É @scientistnik")
			return
		end

		@user = User.new msg.from
		@api = _api

		case msg
		when Telegram::Bot::Types::Message
			message msg
		when Telegram::Bot::Types::CallbackQuery
			callback msg
		end
		
		user = api = nil
	end

	def admin?() user.id == conf[:admin].id end

	def send_message text, hash={}
		hash[:text] = text
		hash[:chat_id] = user.tid if !hash.key? :chat_id
		api.send_message hash
	end

	def message msg
		case msg.text
		when '/start'; send_message "–ß—Ç–æ –í–∞—Å –∏–Ω—Ç–µ—Ä–µ—Å—É–µ—Ç?", reply_markup: first_RKM
		when '/stop'
			if admin?
				send_message '–£—Ö–æ–∂—É –≤ —Å–æ–Ω. –í—Å–µ–º –ø–æ–∫–∞!'
				conf[:cycle] = false
			else
				send_message 'Sorry to see you go :(', reply_markup: RKR.new(remove_keyboard: true)
			end
		when '‚úâÔ∏è –ú–æ–∏ –æ–±—ä—è–≤–ª–µ–Ω–∏—è'
			kb = []
			user.announces.each do |ann|
				kb << IKB.new(text: "–í—ã –æ—Ç–¥–∞–µ—Ç–µ #{ann.give}, –ø–æ–ª—É—á–∞–µ—Ç–µ #{ann.get}", callback_data: "ann-edit_#{ann.id}")
			end
			if kb.empty?
				send_message '–£ –í–∞—Å –Ω–µ—Ç –æ–±—ä—è–≤–ª–µ–Ω–∏–π'
			else
				send_message '–í–æ—Ç –í–∞—à–∏ –æ–±—ä—è–≤–ª–µ–Ω–∏—è:', reply_markup: IKM.new(inline_keyboard: kb)
			end
		when /^.?.? bit/
			asset = Asset.get msg.text[/bit.*/]
			kb = []
			arr_col = [ IKB.new(text: asset.name, callback_data: "sell_#{asset.name}")]
			Asset.all_without(asset).each do |as|
				next if as.name[/^bit/]
				size = Announce.count_pair asset.id, as.id
				arr_col << IKB.new(text: "#{as.name} (#{size})", callback_data: "pair_#{as.name}_#{asset.name}")
				if arr_col.size == 2
					kb << arr_col
					arr_col = []
				end
			end
			kb << arr_col if arr_col.size > 0
			send_message "‚ÄºÔ∏è–ß—Ç–æ –≤—ã —Ö–æ—Ç–∏—Ç–µ –æ—Ç–¥–∞—Ç—å?‚ÄºÔ∏è\n\n–ï—Å–ª–∏ –≤ –¥–∞–Ω–Ω–æ–º —Å–ø–∏—Å–∫–µ –Ω–µ —Ö–≤–∞—Ç–∞–µ—Ç –Ω—É–∂–Ω–æ–≥–æ –ø—É–Ω–∫—Ç–∞, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞ –Ω–∞–ø–∏—à–∏—Ç–µ –º–Ω–µ. –ü—Ä—è–º —Ç—É—Ç –Ω–∞–ø–∏—à–∏—Ç–µ!", reply_markup: IKM.new(inline_keyboard: kb)
		when /^.?.? –ö–æ—à–µ–ª–µ–∫/
			send_message "–î–∞–Ω–Ω–∞—è –æ–ø—Ü–∏—è –ø—Ä–æ—Ö–æ–¥–∏—Ç —Å—Ç–∞–¥–∏—é —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è....–ï—Å–ª–∏ —Ö–æ—Ç–∏—Ç–µ –ø—Ä–∏–Ω—è—Ç—å —É—á–∞—Å—Ç–∏–µ –≤ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏ –ø—Ä–æ—Å—Ç–æ –Ω–∞–ø–∏—à–∏—Ç–µ–º–Ω–µ...–ø—Ä—è–º —Ç—É—Ç..."
		else
			if !user.status.nil? && user.status[/^new_/]
				give, get = user.status.split('_')[1..-1].map {|e| Asset.get e}
				Announce.create user.id, give.id, get.id, message.text
				user.status = nil
				send_message '–°–æ–æ–±—â–µ–Ω–∏–µ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–æ. –°–ø–∞—Å–∏–±–æ!'
			elsif admin?
				if user.status.nil? || user.status.empty?
					kb = []
					kb << IKB.new(text: '–ü–æ–∫–∞–∑–∞—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π', callback_data: "admin-show-users")
					send_message '–î–æ–±—Ä–æ–≥–æ –≤—Ä–µ–º–µ–Ω–∏ —Å—É—Ç–æ–∫, —Ö–æ–∑—è–∏–Ω! –ö–æ–º—É-—Ç–æ —Ö–æ—Ç–∏—Ç–µ –Ω–∞–ø–∏—Å–∞—Ç—å?', reply_markup: IKM.new(inline_keyboard: kb)
				elsif user.status[/^send-msg_/]
					uname = User.new uid: user.status[9..-1]
					send_message msg.text, chat_id: uname.tid
					send_message "–°–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ!"
					user.status = nil
				end
			else
				send_message "–ß—Ç–æ –í–∞—Å –∏–Ω—Ç–µ—Ä–µ—Å—É–µ—Ç?", reply_markup: first_RKM
				send_message "–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å #{user} –Ω–∞–ø–∏—Å–∞–ª –±–æ—Ç—É: #{msg.text}", chat_id: conf[:admin].tid
			end
		end
	end
	
	def callback msg
		call = msg.data
		case call
		when 'admin-show-users'
			kb = []
			arr_col = []
			User.all.each do |u|
				arr_col << IKB.new(text: "@#{u.name}", callback_data: "admin-send_#{u.id}")
				if arr_col.size == 4
					kb << arr_col
					arr_col = []
				end
			end
			kb << arr_col if arr_col.size > 0
			send_message "–ö–æ–º—É –Ω–∞–ø–∏—Å–∞—Ç—å?", reply_markup: IKM.new(inline_keyboard: kb)

		when 'admin-cancel-send'
			user.status = nil
			send_message "–û—Ç–º–µ–Ω–µ–Ω–æ..."
		
		when /^admin-send_/
			uname = User.new uid: call[11..-1]
			user.status = "send-msg_#{uname.id}"
			kb = []
			kb << IKB.new(text: "–û—Ç–º–µ–Ω–∏—Ç—å", callback_data: 'admin-cancel-send')
			send_message "–ß—Ç–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é #{uname.name} –Ω–∞–ø–∏—Å–∞—Ç—å?", reply_markup: IKM.new(inline_keyboard: kb)

		when /^sell_/
			asset = Asset.get call.split("_")[-1]
			kb = []
			arr_col = []
			Asset.all_without(asset).each do |get|
				next if get.name[/^bit/]
				size = Announce.count_pair get.id, asset.id
				arr_col << IKB.new(text: "#{get.name} (#{size})", callback_data: "pair_#{asset.name}_#{get.name}")
				if arr_col.size == 2
					kb << arr_col
					arr_col = []
				end
			end
			kb << arr_col if arr_col.size < 2
			send_message "–í—ã –æ—Ç–¥–∞–µ—Ç–µ #{asset.name}. ‚ÄºÔ∏è–ß—Ç–æ –í—ã —Ö–æ—Ç–∏—Ç–µ –ø–æ–ª—É—á–∏—Ç—å?‚ÄºÔ∏è\n\n–ï—Å–ª–∏ –≤ –¥–∞–Ω–Ω–æ–º —Å–ø–∏—Å–∫–µ –Ω–µ —Ö–≤–∞—Ç–∞–µ—Ç –ø—É–Ω–∫—Ç–∞, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞ –æ–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É –±–æ—Ç–∞ @scientistnik", reply_markup: IKM.new(inline_keyboard: kb)

		when /^ann-new_/
			give, get = call.split('_')[1..-1].map {|e| Asset.get e}
			user.status = "new_#{give.name}_#{get.name}"
			send_message "–ù–∞–ø–∏—à–∏—Ç–µ –æ–±—ä—è–≤–ª–µ–Ω–∏–µ:\n\n–ü–æ–∂–∞–ª—É–π—Å—Ç–∞ —É–∫–∞–∂–∏—Ç–µ –≤ –æ–±—ä—è–≤–ª–µ–Ω–∏–∏ —Å–ª–µ–¥—É—é—â–∏–µ –ø—É–Ω–∫—Ç—ã:\n1. –ö—É—Ä—Å –æ–±–º–µ–Ω–∞. –ò–∑ –æ–±—ä—è–≤–ª–µ–Ω–∏—è –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å –ø–æ–Ω—è—Ç–Ω–æ, —Å–∫–æ–ª—å–∫–æ –í—ã –≥–æ—Ç–æ–≤—ã –æ—Ç–¥–∞—Ç—å, –∞ —Å–∫–æ–ª—å–∫–æ –ø–æ–ª—É—á–∏—Ç—å.\n2. –ö–æ–ª–∏—á–µ—Å—Ç–≤–µ–Ω–Ω–æ–µ –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–µ. –ï—Å–ª–∏ –í—ã –≥–æ—Ç–æ–≤—ã –∫ –æ–±–º–µ–Ω—É –∏–º–µ—è –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏—è –Ω–∞ –º–∏–Ω–∏–º–∞–ª—å–Ω—ã–π –∏/–∏–ª–∏ –º–∞–∫—Å–∏–º–∞–ª—å–Ω—ã–π –æ–±—ä–µ–º, —É–∫–∞–∂–∏—Ç–µ —ç—Ç–æ!\n3. –£–∫–∞–∂–∏—Ç–µ –≤—Ä–µ–º—è –≤ —Ç–µ—á–µ–Ω–∏–∏ –∫–æ—Ç–æ—Ä–æ–≥–æ –í—ã –æ–ø–µ—Ä–∞—Ç–∏–≤–Ω–æ —Å–º–æ–∂–∏—Ç–µ –æ—Å—É—â–µ—Å—Ç–≤–∏—Ç—å –æ–±–º–µ–Ω. –ù–µ –∑–∞–±—É–¥—å—Ç–µ —É–∫–∞–∑–∞—Ç—å —á–∞—Å–æ–≤–æ–π –ø–æ—è—Å!"

		when /^ann-show_/
			ann = Announce.get_id call.split('_')[-1]
			if !ann.id.nil?
				kb = []
				kb << IKB.new(text: '–ù–∞—á–∞—Ç—å –æ–±–º–µ–Ω', callback_data: "change_#{ann.give}_#{ann.get}_#{ann.user.id}")
				send_message "–û–±—ä—è–≤–ª–µ–Ω–∏–µ @#{ann.user}, –æ–Ω –æ—Ç–¥–∞–µ—Ç #{ann.give}, –ø–æ–ª—É—á–∞–µ—Ç #{ann.get}:\n\n#{ann.message}", reply_markup: IKM.new(inline_keyboard: kb)
			else
				send_message "–û–±—ä—è–≤–ª–µ–Ω–∏–µ @#{name} –ø–æ –æ–±–º–µ–Ω—É #{para} –Ω–µ –Ω–∞–π–¥–µ–Ω–æ!"
			end

		when /^ann-edit_/
			ann = Announce.get_id call.split("_")[-1]
			kb = [[IKB.new(text: '–†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å', callback_data: "ann-new_#{ann.give}_#{ann.get}"),IKB.new(text: '–£–¥–∞–ª–∏—Ç—å', callback_data: "ann-del_#{ann.id}")]]
			send_message ann.message, reply_markup: IKM.new(inline_keyboard: kb)

		when /^ann-del_/
			Announce.del call.split('_')[-1]
			send_message '–û–±—ä—è–≤–ª–µ–Ω–∏–µ —É–¥–∞–ª–µ–Ω–æ'

		when /^change_/
			give_nm, get_nm, user_id = call.split('_')[1..-1]
			give = Asset.get give_nm
			get = Asset.get get_nm
			chuser = User.new uid: user_id
			send_message "–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å @#{user.name} —Ö–æ—á–µ—Ç –ø—Ä–æ–∏–∑–≤–µ—Å—Ç–∏ –æ–±–º–µ–Ω #{get} –Ω–∞ #{give}! –°–≤—è–∂–∏—Ç–µ—Å—å —Å –Ω–∏–º –¥–ª—è –æ–±–º–µ–Ω–∞!", chat_id: chuser.tid

			kb = []
			bot.api.send_message(chat_id: message.from.id, text: "–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å @#{chuser.name} –∏–∑–≤–µ—â–µ–Ω! –°–≤—è–∂–∏—Ç–µ—Å—å —Å –Ω–∏–º –¥–ª—è –æ–±–º–µ–Ω–∞!") #, reply_markup: markup)

		when /^pair_/
			give, get = call.split('_')[1..-1].map {|e| Asset.get e}
			arr = Announce.get_all giveas: get.id, getas: give.id
			kb = []
			arr_col = []
			arr.each do |ann|
				arr_col << IKB.new(text: "@#{ann.user}", callback_data: "ann-show_#{ann.id}")
				if arr_col.size == 2
					kb << arr_col
					arr_col = []
				end
			end
			kb << arr_col if arr_col.size > 0
			kb << IKB.new(text: 'üìä –ë–µ–∑–æ–ø–∞—Å–Ω—ã–π –æ–±–º–µ–Ω', callback_data: "bot-new_#{give}_#{get}")
			kb << IKB.new(text: '–°–æ–∑–¥–∞—Ç—å —Å–≤–æ–µ –æ–±—ä—è–≤–ª–µ–Ω–∏–µ', callback_data: "ann-new_#{give}_#{get}")
			if arr.empty?
				send_message "–ù–µ—Ç –ø–æ–¥—Ö–æ–¥—è—â–∏—Ö –≤–∞—Ä–∏–∞–Ω—Ç–æ–≤. \n\n–í—ã –º–æ–∂–µ—Ç–µ –æ—Å—É—â–µ—Å—Ç–≤–∏—Ç—å —Å–¥–µ–ª–∫—É —á–µ—Ä–µ–∑ –±–æ—Ç–∞ –∏–ª–∏ –¥–æ–±–∞–≤–∏—Ç—å —Å–æ–±—Å—Ç–≤–µ–Ω–Ω–æ–µ –æ–±—ä—è–≤–ª–µ–Ω–∏–µ.", reply_markup: IKM.new(inline_keyboard: kb)
			else
				send_message '–î–æ—Å—Ç—É–ø–Ω—ã–µ', reply_markup: IKM.new(inline_keyboard: kb)
			end

		when /^bot-new_/
			give, get = call.split('_')[1..-1].map {|e| Asset.get e}
			send_message "–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å @#{user} —Ö–æ—á–µ—Ç –ø–æ–º–µ–Ω—è—Ç—å #{give} –Ω–∞ #{get}", chat_id: conf[:admin].tid
			send_message "üìä –ë–µ–∑–æ–ø–∞—Å–Ω—ã–π –æ–±–º–µ–Ω\n\n‚ÄºÔ∏è–≠—Ç–æ –æ–±–º–µ–Ω –º–µ–∂–¥—É —á–∞—Å–Ω—ã–º–∏ –ª–∏—Ü–∞–º–∏ —Å —á–∞—Å—Ç–∏—á–Ω—ã–º –∏–ª–∏ –ø–æ–ª–Ω—ã–º —É—á–∞—Å—Ç–∏–µ–º –±–æ—Ç–∞.‚ÄºÔ∏è\n\n –û–±–º–µ–Ω –ø—Ä–æ–∏—Å—Ö–æ–¥–∏—Ç –≤ —Ç—Ä–∏ —ç—Ç–∞–ø–∞:\n\n1. –í–ª–∞–¥–µ–ª–µ—Ü bitAsset –ø–µ—Ä–µ—Å—ã–ª–∞–µ—Ç –Ω–∞ –∞–∫–∫–∞—É–Ω—Ç –±–æ—Ç–∞ –∂–µ–ª–∞–µ–º—ã–π –æ–±—ä–µ–º bitAsset –¥–ª—è –æ–±–º–µ–Ω–∞ –∏ —É–∫–∞–∑—ã–≤–∞–µ—Ç –Ω–æ–º–µ—Ä –∫–∞—Ä—Ç–æ—á–∫–∏. \n2. –ü–æ–∫—É–ø–∞—Ç–µ–ª—å bitAsset –ø–µ—Ä–µ–≤–æ–¥–∏—Ç —Å—Ä–µ–¥—Å—Ç–≤–∞ –Ω–∞ –∫–∞—Ä—Ç–æ—á–∫—É.\n3. –ü–æ—Å–ª–µ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è –ø–µ—Ä–µ–≤–æ–¥–∞ —Å—Ä–µ–¥—Å—Ç–≤, –±–æ—Ç –ø–µ—Ä–µ–≤–æ–¥–∏—Ç bitAsset –≤ –∑–∞–¥–∞–Ω–Ω—ã–π –∞–∫–∫–∞—É–Ω—Ç.\n\n–ö–æ–º–∏—Å—Å–∏—é –±–æ—Ç –±–µ—Ä–µ—Ç —É –∂–µ–ª–∞—é—â–µ–≥–æ –ø—Ä–∏–æ–±—Ä–µ—Å—Ç–∏ bitAsset. \n\n–ù–∞ –¥–∞–Ω–Ω—ã–π –º–æ–º–µ–Ω—Ç, –∫–æ–º–∏—Å—Å–∏—è —Å–æ—Å—Ç–∞–≤–ª—è–µ—Ç 10 —Ä—É–±–ª–µ–π."
		else
			p "–ù–µ–≤–µ—Ä–Ω—ã–π –∑–∞–ø—Ä–æ—Å)))"
		end
	end
end
